# Generated by Django 5.0.9 on 2024-11-13 08:48

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'db_table': 'categories',
            },
        ),
        migrations.CreateModel(
            name='RentalMachine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('machine_type', models.CharField(choices=[('COFFEE_MACHINE', 'Coffee Machine'), ('GRINDER', 'Grinder')], max_length=20)),
                ('serial_number', models.CharField(max_length=50, unique=True)),
                ('daily_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('weekly_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('monthly_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('quarterly_rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_available', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'rental_machines',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('part_number', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('shelf_location', models.CharField(max_length=50)),
                ('minimum_stock', models.IntegerField(default=0)),
                ('current_stock', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, upload_to='products/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.category')),
            ],
            options={
                'db_table': 'products',
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(choices=[('IN', 'Stock In'), ('OUT', 'Stock Out'), ('RETURN', 'Return'), ('ADJUSTMENT', 'Adjustment')], max_length=20)),
                ('quantity', models.IntegerField()),
                ('reference_number', models.CharField(max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.product')),
            ],
            options={
                'db_table': 'stock_movements',
            },
        ),
        migrations.CreateModel(
            name='TechnicianCheckout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkout_date', models.DateTimeField(auto_now_add=True)),
                ('due_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('CHECKED_OUT', 'Checked Out'), ('RETURNED', 'Returned'), ('USED', 'Used'), ('OVERDUE', 'Overdue')], default='CHECKED_OUT', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'technician_checkouts',
            },
        ),
        migrations.CreateModel(
            name='CheckoutItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('returned_quantity', models.IntegerField(default=0)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.product')),
                ('checkout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.techniciancheckout')),
            ],
            options={
                'db_table': 'checkout_items',
            },
        ),
        migrations.CreateModel(
            name='ProductPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_type', models.CharField(choices=[('BUSINESS', 'Business'), ('COMPANY', 'Company'), ('INDIVIDUAL', 'Individual')], max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.product')),
            ],
            options={
                'db_table': 'product_prices',
                'unique_together': {('product', 'customer_type')},
            },
        ),
    ]
